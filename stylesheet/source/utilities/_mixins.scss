/*------------------------------------*\
  #Mixins
\*------------------------------------*/

/**
 * This file contains some basic mixins to provide with some helper methods
 * to ease things up a bit.
 */

/*------------------------------------*\
  # Text-truncate
	Requires inline-block or block for proper styling
  @compatibility: untested
\*------------------------------------*/
@mixin text-truncate() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/*------------------------------------*\
  # Clearfix
	Clear floating elements within a container to prevent odd rendering
	@compability: untested
\*------------------------------------*/

@mixin clearfix() {
  &::after {
    content: "";
    display: table;
    clear: both;
  }
}

/*------------------------------------*\
  #CSS-triangle
\*------------------------------------*/

/**
 * We use this to create isosceles triangles
 * $triangle-size - Used to set border-size. No default, set a px or em size.
 * $triangle-color - Used to set border-color which makes up triangle. No default
 * $triangle-direction - Used to determine which direction triangle points.
 * Options: top, bottom, left, right
 */

@mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
  border: inset $triangle-size;
  content: "";
  display: block;
  height: 0;
  width: 0;
  @if ($triangle-direction == top) {
    border-color: $triangle-color transparent transparent transparent;
    border-top-style: solid;
  }
  @if ($triangle-direction == bottom) {
    border-color: transparent transparent $triangle-color transparent;
    border-bottom-style: solid;
  }
  @if ($triangle-direction == left) {
    border-color: transparent transparent transparent $triangle-color;
    border-left-style: solid;
  }
  @if ($triangle-direction == right) {
    border-color: transparent $triangle-color transparent transparent;
    border-right-style: solid;
  }
}

/*------------------------------------*\
  #Hamburger-menu
\*------------------------------------*/

/**
 * We use this to create the icon with three lines aka the hamburger icon, the menu-icon or the navicon
 * $width - Width of hamburger icon in rem
 * $left - If false, icon will be centered horizontally || explicitly set value in rem
 * $top - If false, icon will be centered vertically || explicitly set value in rem
 * $thickness - thickness of lines in hamburger icon, set value in px
 * $gap - spacing between the lines in hamburger icon, set value in px
 * $color - icon color
 * $hover-color - icon color during hover
 * $offcanvas - Set to true of @include in offcanvas
 */

@mixin hamburger($width, $left, $top, $thickness, $gap, $color, $hover-color, $offcanvas) {
  span::after {
    content: "";
    display: block;
    height: 0;
    position: absolute;

    @if $offcanvas {
      @if $top {
        top: $top;
      }
      @else {
        top: 50%;
        margin-top: (-$width/2);
      }
      @if $left {
        left: $left;
      }
      @else {
        left: ($tabbar-menu-icon-width - $width)/2;
      }
    }
    @else {
      margin-top: -($width/2);
      top: 50%;
       *#{$opposite-direction}: $topbar-link-padding;
    }

    box-shadow:
      0 0 0 $thickness $color,
      0 $gap + $thickness 0 $thickness $color,
      0 (2 * $gap + 2*$thickness) 0 $thickness $color;
    -webkit-box-shadow:
      0 0 0 $thickness $color,
      0 $gap + $thickness 0 $thickness $color,
      0 (2 * $gap + 2*$thickness) 0 $thickness $color;
    width: $width;
  }
  span:hover:after {
    box-shadow:
      0 0 0 $thickness $hover-color,
      0 $gap + $thickness 0 $thickness $hover-color,
      0 (2 * $gap + 2*$thickness) 0 $thickness $hover-color;
    -webkit-box-shadow:
      0 0 0 $thickness $hover-color,
      0 $gap + $thickness 0 $thickness $hover-color,
      0 (2 * $gap + 2*$thickness) 0 $thickness $hover-color;
  }
}





/*------------------------------------*\
  #Circle
\*------------------------------------*/

/**
 * Use this mixin to create a circle
 */

@mixin circle($width) {
  width: $width;
  height: $width;
  -webkit-border-radius: $width/2;
     -moz-border-radius: $width/2;
          border-radius: $width/2;
}





/*------------------------------------*\
  #Center-elements
\*------------------------------------*/

/**
 * Center element horizontal and vertical
 *
 * Mixin for centering child elements vertical and horizontal
 * Remember to add 'position: relative' to parent element
 */

$varCenter: 50%;

@mixin centerElemHV() {
  position: absolute;
  top: $varCenter;
  left: $varCenter;
  transform: translate(-$varCenter, -$varCenter);
}


/**
 * Center element horizontal
 *
 * Mixin for centering child elements horizontal
 * Remember to add 'position: relative' to parent element
 */

@mixin centerElemH() {
  position: absolute;
  top: $varCenter;
  transform: translateY(-$varCenter);
}
