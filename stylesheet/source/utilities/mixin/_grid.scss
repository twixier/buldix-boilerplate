/*------------------------------------*\
  # Grid
  Mixins for constructing our grid
  @todo: Fix formatting and make this file more clean
\*------------------------------------*/

@mixin grid-container($gutter: $grid-base-gutter) {
  margin-left: auto;
  margin-right: auto;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
  @if not $grid-flex-enabled {
    @include clearfix();
  }
}

@mixin grid-row($gutters: $grid-gutter-mq) {
  @if $grid-flex-enabled {
    display: flex;
    flex-wrap: wrap;
  } @else {
    @include clearfix();
  }

  @each $breakpoint in map-keys($gutters) {
    @include media-breakpoint-up($breakpoint) {
      $gutter: map-get($gutters, $breakpoint);
      margin-right: ($gutter / -2);
      margin-left:  ($gutter / -2);
    }
  }
}

@mixin make-col-ready($gutters: $grid-gutter-widths) {
  position: relative;
  min-height: 1px; // Prevent collapsing

  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  @if $grid-flex-enabled {
    width: 100%;
  }

  @each $breakpoint in map-keys($gutters) {
    @include media-breakpoint-up($breakpoint) {
      $gutter: map-get($gutters, $breakpoint);
      padding-right: ($gutter / 2);
      padding-left:  ($gutter / 2);
    }
  }
}

@mixin make-col($size, $columns: $grid-columns) {
  @if $grid-flex-enabled {
    flex: 0 0 percentage($size / $columns);
    max-width: percentage($size / $columns); 
  } @else {
    float: left;
    width: percentage($size / $columns);
  }
}

@mixin make-gutters($gutters: $grid-gutter-mq) {
  @each $breakpoint in map-keys($gutters) {
    @include media-breakpoint-up($breakpoint) {
      $gutter: map-get($gutters, $breakpoint);
      padding-right: ($gutter / 2);
      padding-left:  ($gutter / 2);
    }
  }
}

@mixin grid-columns($columns: $grid-columns, $gutters: $grid-gutter-mq, $breakpoints: $breakpoints) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;

    @if $grid-flex-enabled {
      width: 100%;
    }
    
    @include make-gutters($gutters);
  }

  $breakpoint-counter: 0;
  @each $breakpoint in map-keys($breakpoints) {
    $breakpoint-counter: ($breakpoint-counter + 1);

    // Allow columns to stretch full width below their breakpoints
    .col-#{$breakpoint} {
      @extend %grid-column;
    }

    @for $i from 1 through $columns {
      .col-#{$breakpoint}-#{$i} {
        @extend %grid-column;
      }
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Flex setup
      @if $grid-flex-enabled {
        .col-#{$breakpoint} {
          flex-basis: 0;
          flex-grow: 1;
          max-width: 100%;
        }
       .col-#{$breakpoint}-auto {
          flex: 0 0 auto;
          width: auto;
        }
      }
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      @for $i from 1 through $columns {
        .col-#{$breakpoint}-#{$i} {
          @include make-col($i, $columns);
        }
      }
    }
  }
}

@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      width: $container-max-width;
      max-width: 100%;
    }
  }
}

